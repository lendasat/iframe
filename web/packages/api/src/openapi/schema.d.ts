/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/check": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if user is authenticated. */
        get: operations["check_auth_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/forgotpassword": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request password reset for user account. */
        post: operations["forgot_password_handler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/is-registered": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if a user is registered and verified with the given email. */
        get: operations["get_is_registered"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logout user and clear authentication cookie. */
        get: operations["logout_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pake-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Initiate PAKE authentication login. */
        post: operations["post_pake_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pake-verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete PAKE authentication verification. */
        post: operations["post_pake_verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pake-verify-mobile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete PAKE authentication verification, for mobile clients. */
        post: operations["post_pake_verify_mobile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pubkey-challenge": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Request a challenge for pubkey authentication. */
        post: operations["post_pubkey_challenge"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pubkey-register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register a new user with pubkey authentication. */
        post: operations["post_pubkey_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/pubkey-verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify pubkey signature and authenticate user. */
        post: operations["post_pubkey_verify"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh user authentication token. */
        post: operations["refresh_token_handler"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh-token-mobile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Refresh user authentication token, for mobile clients. */
        post: operations["refresh_token_handler_mobile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register a new user with email and password. To create borrower API accounts (using a master API
         *     key), refer to /api/create-api-account.
         * @description Possible error types:
         *     - Invalid Email: The provided email address format is invalid
         *     - User Exists: A user with this email address already exists
         *     - Invite Code Required: No invite code was provided (required at this time)
         *     - Invalid Referral Code: The provided referral/invite code is invalid or expired
         *     - Database Error: Internal database error during user creation or referral code processing
         */
        post: operations["post_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/reset-legacy-password/{password_reset_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reset legacy password with reset token. */
        put: operations["reset_legacy_password_handler"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/resetpassword/{password_reset_token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Reset user password with reset token. */
        put: operations["reset_password_handler"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/totp-verify-login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete TOTP verification for login */
        post: operations["post_totp_verify_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/totp-verify-login-mobile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Complete PAKE authentication verification, for mobile clients. */
        post: operations["post_totp_verify_mobile"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/verifyemail/{verification_code}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Verify user email with verification code. */
        get: operations["verify_email_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/waitlist": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add user to the waitlist. */
        post: operations["post_add_to_waitlist"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bringin/api-key": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if borrower has Bringin API key. */
        get: operations["has_api_key"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/bringin/connect": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Connect borrower with Bringin service. */
        post: operations["post_connect_with_bringin"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/chat/notification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Send a new chat notification to the lender associated with a contract. */
        post: operations["new_chat_notification"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all personal contracts with pagination, status filtering, and sorting support. */
        get: operations["get_contracts"];
        put?: never;
        /**
         * Post a contract request.
         * @description The contract request will be forwarded to the lender.
         */
        post: operations["post_contract_request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific personal contract. */
        get: operations["get_contract"];
        put?: never;
        post?: never;
        /** Cancel a contract request. */
        delete: operations["cancel_contract_request"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/borrower-address": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update borrower btc address of a contract. */
        put: operations["put_borrower_btc_address"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/broadcast-claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Broadcast claim-collateral transaction. */
        post: operations["post_claim_tx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/broadcast-recover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Broadcast recover-collateral transaction. */
        post: operations["post_recover_tx"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/btc-invoice-paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Report the payment of a Bitcoin repayment invoice.
         * @description Allows the borrower to submit a Bitcoin transaction ID to mark an invoice and its corresponding
         *     installment as paid from their perspective.
         */
        put: operations["put_report_btc_payment"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/claim": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a claim-collateral PSBT, to be completed with your own signature on the collateral contract.
         * @description The collateral can be claimed when the Lendasat server and the lender have confirmed that the
         *     borrower has repaid the loan.
         */
        get: operations["get_claim_collateral_psbt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/extend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Post a request to extend the contract. */
        post: operations["post_extend_contract_request"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/fiat-details": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Provide fiat details to the contract. */
        put: operations["put_provide_fiat_loan_details"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/generate-btc-invoice": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate a Bitcoin repayment invoice for a contract installment.
         * @description Creates a Bitcoin invoice based on the current Bitcoin price for the next pending installment.
         *     Only works for USD-based loans and contracts with Bitcoin repayment address configured.
         */
        post: operations["post_generate_btc_invoice"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/installment-paid": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark an installment as paid. */
        put: operations["put_installment_paid"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/contracts/{id}/recover": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a recover-collateral PSBT, to be completed with your own signature on the collateral
         *     contract.
         * @description The collateral can be recovered when the Lendasat server has deemed that the lender will not
         *     disburse the principal.
         */
        get: operations["get_recover_collateral_psbt"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/create-api-account": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a borrower API account i.e. a borrower account designed to interact with the Lendasat
         *     server with an API key. */
        post: operations["post_create_api_account"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/create-api-account/byok": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Create a borrower API account with a client-generated API key (BYOK - Bring Your Own Key). */
        post: operations["post_create_api_account_byok"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/disputes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all disputes for a specific contract. */
        get: operations["get_all_disputes_for_contract"];
        put?: never;
        /** Create a new dispute for a contract. */
        post: operations["create_dispute"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/disputes/{dispute_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Add a message to an existing dispute. */
        put: operations["add_message_to_dispute"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/disputes/{dispute_id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Resolve a dispute that was started by the borrower. */
        put: operations["put_resolve_dispute"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Shows if server is up and running. */
        get: operations["health_checker_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all personal API keys. */
        get: operations["get_api_keys"];
        put?: never;
        /** Create a new API key. */
        post: operations["post_api_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Delete an API key. */
        delete: operations["delete_api_key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loan-applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all loan applications for the authenticated borrower. */
        get: operations["get_loan_applications_by_borrower"];
        put?: never;
        /** Create a new loan application. */
        post: operations["create_loan_application"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loan-applications/delete/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark a loan application as deleted. */
        put: operations["put_mark_loan_application_as_deleted"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loan-applications/edit/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Edit a loan application.
         * @description In practice, we replace the loan application with a new one with the new values, and mark the
         *     old one as deleted.
         */
        put: operations["put_edit_loan_application"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/loan-applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific loan application by ID. */
        get: operations["get_loan_application_by_application_and_application_id"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/moon/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all cards for the authenticated borrower. */
        get: operations["get_cards"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/moon/new": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new card by generating an invoice.
         * @description The card will only be created once the invoice has been paid
         */
        post: operations["new_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/moon/topup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Topup a card by generating an invoice. */
        post: operations["topup_card"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/moon/transactions/{card_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get transactions for a specific card. */
        get: operations["get_card_transactions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notification-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get borrower notification settings. */
        get: operations["get_notification_settings"];
        /** Update borrower notification settings. */
        put: operations["put_notification_settings"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all notifications for a borrower with pagination support. */
        get: operations["get_all_notifications"];
        /** Mark all notifications as read for the authenticated borrower. */
        put: operations["put_mark_all_as_read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/notifications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Mark a specific notification as read. */
        put: operations["put_mark_as_read"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all available loan offers. */
        get: operations["get_all_available_loan_offers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/by-lender/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get all the loan offers of a given lender. */
        get: operations["get_available_loan_offers_by_lender"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/offers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get a specific loan offer. */
        get: operations["get_loan_offer"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/pricefeed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * WebSocket endpoint for real-time price feed updates.
         * @description This endpoint upgrades the HTTP connection to a WebSocket and provides
         *     real-time price feed updates to connected clients.
         */
        get: operations["price_feed_websocket_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profiles/borrowers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public statistics for a borrower. */
        get: operations["get_borrower_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/profiles/lenders/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get public statistics for a lender. */
        get: operations["get_lender_stats"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update borrower profile settings including timezone. */
        put: operations["update_profile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/locale": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Update borrower locale preferences. */
        put: operations["update_locale"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user information. */
        get: operations["get_me_handler"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/totp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** Disable TOTP for the user */
        delete: operations["disable_totp"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/totp/setup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Generate TOTP secret and QR code for setup */
        post: operations["setup_totp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/totp/verify": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Verify TOTP code and enable TOTP for the user */
        post: operations["verify_totp"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/version": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Return the current git tag and commit hash. */
        get: operations["version"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiKey: {
            has_key: boolean;
        };
        /** @description Public information about an API key. */
        ApiKeyInfo: {
            /** Format: date-time */
            created_at: string;
            description: string;
            /** Format: int32 */
            id: number;
        };
        ApiKeyResponse: {
            /** @description The newly created API key. This is only shown once. */
            api_key: string;
        };
        /** @enum {string} */
        AssetTypeFilter: "fiat" | "stable_coins" | "all";
        /**
         * @description Status of a Bitcoin repayment invoice.
         * @enum {string}
         */
        BitcoinInvoiceStatus: "pending" | "paid" | "confirmed";
        /** @description Bitcoin repayment invoice response for API. */
        BitcoinRepaymentInvoiceResponse: {
            address: string;
            /** Format: int64 */
            amount_sats: number;
            /** Format: double */
            amount_usd: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            expires_at: string;
            /** Format: uuid */
            id: string;
            /** Format: uuid */
            installment_id: string;
            status: components["schemas"]["BitcoinInvoiceStatus"];
            txid?: string | null;
            /** Format: date-time */
            updated_at: string;
        };
        BorrowerLoanFeature: {
            description?: string | null;
            id: string;
            is_enabled: boolean;
            name: string;
        };
        BorrowerLoanFeatureResponse: {
            id: string;
            name: string;
        };
        BorrowerNotificationSettingsResponse: {
            contract_status_changed_email: boolean;
            contract_status_changed_telegram: boolean;
            daily_offer_digest_email: boolean;
            new_chat_message_email: boolean;
            new_chat_message_telegram: boolean;
            new_loan_offer_telegram: boolean;
            on_login_email: boolean;
            on_login_telegram: boolean;
        };
        BorrowerStats: {
            id: string;
            /** Format: date-time */
            joined_at: string;
            name: string;
            /**
             * Format: int64
             * @description Number of total closed or currently open contracts
             */
            successful_contracts: number;
            timezone?: string | null;
        };
        BroadcastClaimTxResponse: {
            /** @description Transaction ID of the broadcast claim transaction */
            txid: string;
        };
        BroadcastRecoverTxResponse: {
            /** @description Transaction ID of the broadcast recovery transaction */
            txid: string;
        };
        Card: {
            /** Format: double */
            available_balance: number;
            /** Format: double */
            balance: number;
            cvv: string;
            expiration: string;
            /** Format: uuid */
            id: string;
            pan: string;
        };
        CardTransaction: {
            data: components["schemas"]["TransactionData"];
            /** @enum {string} */
            type: "Card";
        } | {
            data: components["schemas"]["TransactionData"];
            /** @enum {string} */
            type: "CardAuthorizationRefund";
        } | {
            data: components["schemas"]["DeclineData"];
            /** @enum {string} */
            type: "DeclineData";
        };
        ClaimTx: {
            tx: string;
        };
        Contract: {
            /**
             * Format: double
             * @description Total amount owed. This includes
             *     - loan principal
             *     - outstanding interest
             */
            balance_outstanding: number;
            borrower_btc_address: string;
            borrower_derivation_path?: string | null;
            borrower_loan_address?: string | null;
            borrower_pk: string;
            btc_loan_repayment_address?: string | null;
            /** @description Indicates whether the contract can be extended or not.
             *
             *     Contract extensions are possible if:
             *
             *     - The lender permits it.
             *     - The contract is at least halfway through its lifetime. */
            can_extend: boolean;
            /** Format: uuid */
            client_contract_id?: string | null;
            /**
             * Format: int64
             * @description The amount of sats accounted for the contract. Note: this value is `[origination_fee_sats]`
             *     lower than `[deposited_sats]`
             */
            collateral_sats: number;
            collateral_script?: string | null;
            contract_address?: string | null;
            /** Format: date-time */
            created_at: string;
            /**
             * Format: int64
             * @description The amount of sats in the contract address. This includes the `[collateral_sats]`and
             *     `[origination_fee_sats]`
             */
            deposited_sats: number;
            /** Format: int32 */
            duration_days: number;
            /** Format: date-time */
            expiry: string;
            extended_by_contract?: string | null;
            extends_contract?: string | null;
            /** Format: double */
            extension_interest_rate?: number | null;
            /** Format: int64 */
            extension_max_duration_days: number;
            extension_origination_fee: components["schemas"]["OriginationFee"][];
            fiat_loan_details_borrower?: null | components["schemas"]["FiatLoanDetailsWrapperResponse"];
            fiat_loan_details_lender?: null | components["schemas"]["FiatLoanDetailsWrapperResponse"];
            id: string;
            /** Format: int64 */
            initial_collateral_sats: number;
            /** Format: double */
            initial_ltv: number;
            installments: components["schemas"]["Installment"][];
            /** Format: double */
            interest: number;
            /** Format: double */
            interest_rate: number;
            kyc_info?: null | components["schemas"]["KycInfo"];
            lender: components["schemas"]["LenderStats"];
            lender_npub: components["schemas"]["Npub"];
            lender_pk: string;
            /** Format: double */
            liquidation_price: number;
            liquidation_status: components["schemas"]["LiquidationStatus"];
            /** Format: double */
            loan_amount: number;
            loan_asset: components["schemas"]["LoanAsset"];
            loan_repayment_address?: string | null;
            loan_type: components["schemas"]["LoanType"];
            /**
             * Format: double
             * @description Defines the LTV threshold for getting liquidated
             */
            ltv_threshold_liquidation: number;
            /**
             * Format: double
             * @description Defines the LTV threshold for receiving the first margin call
             */
            ltv_threshold_margin_call_1: number;
            /**
             * Format: double
             * @description Defines the LTV threshold for receiving the second margin call
             */
            ltv_threshold_margin_call_2: number;
            /** Format: int64 */
            origination_fee_sats: number;
            status: components["schemas"]["ContractStatus"];
            timeline: components["schemas"]["TimelineEvent"][];
            transactions: components["schemas"]["LoanTransaction"][];
            /** Format: date-time */
            updated_at: string;
        };
        ContractDispute: {
            contract_id: string;
            /** Format: date-time */
            created_at: string;
            /** Format: uuid */
            id: string;
            initiator_id: string;
            initiator_type: components["schemas"]["DisputeInitiatorType"];
            reason: string;
            resolution_notes?: string | null;
            /** Format: date-time */
            resolved_at?: string | null;
            status: components["schemas"]["DisputeStatus"];
            /** Format: date-time */
            updated_at: string;
        };
        ContractDisputeMessage: {
            /** Format: date-time */
            created_at: string;
            /** Format: uuid */
            dispute_id: string;
            /** Format: uuid */
            id: string;
            message: string;
            sender_id: string;
            sender_type: components["schemas"]["SenderType"];
        };
        ContractRequestSchema: {
            borrower_btc_address: string;
            borrower_derivation_path: string;
            /** @description This is optional because certain integrations (such as Pay with Moon) define their own loan
             *     address. */
            borrower_loan_address?: string | null;
            borrower_npub?: null | components["schemas"]["Npub"];
            borrower_pk: string;
            /**
             * Format: uuid
             * @description Optional client id for this contract
             */
            client_contract_id?: string | null;
            /** Format: int32 */
            duration_days: number;
            fiat_loan_details?: null | components["schemas"]["FiatLoanDetailsWrapper"];
            id: string;
            /** Format: double */
            loan_amount: number;
            loan_type: components["schemas"]["LoanType"];
            /**
             * Format: uuid
             * @description If the `loan_type` field is set to `LoanType::PayWithMoon`, this field indicates whether
             *     the contract corresponds to a new card or an existing one.
             */
            moon_card_id?: string | null;
        };
        /** @enum {string} */
        ContractStatus: "Requested" | "Approved" | "CollateralSeen" | "CollateralConfirmed" | "PrincipalGiven" | "RepaymentProvided" | "RepaymentConfirmed" | "Undercollateralized" | "Defaulted" | "ClosingByClaim" | "Closed" | "Closing" | "ClosingByLiquidation" | "ClosedByLiquidation" | "ClosingByDefaulting" | "ClosedByDefaulting" | "Extended" | "Rejected" | "DisputeBorrowerStarted" | "DisputeLenderStarted" | "Cancelled" | "RequestExpired" | "ApprovalExpired" | "CollateralRecoverable" | "ClosingByRecovery" | "ClosedByRecovery";
        ContractsQuery: {
            /** Format: int32 */
            limit?: number;
            /** Format: int32 */
            page?: number;
            /** @description Sort field for ordering results. Default is 'created_at'. */
            sort_by?: components["schemas"]["SortField"];
            /** @description Sort order. Default is 'desc' (newest first). */
            sort_order?: components["schemas"]["SortOrder"];
            /** @description Filter contracts by status. Can be provided multiple times to filter by multiple statuses.
             *     Example: ?status=Requested,Approved */
            status?: components["schemas"]["ContractStatus"][];
        };
        /** @description Request for creating an API account with BYOK (Bring Your Own Key) */
        CreateApiAccountByokRequest: {
            api_key: string;
            email: string;
            name: string;
            referral_code: string;
            timezone?: string | null;
        };
        CreateApiAccountRequest: {
            email?: string | null;
            name: string;
            timezone?: string | null;
        };
        CreateApiAccountResponse: {
            api_key: string;
            email?: string | null;
            id: string;
            name: string;
            timezone?: string | null;
        };
        CreateApiKey: {
            /** @description Purpose of the API key. */
            description: string;
        };
        CreateLoanApplicationSchema: {
            borrower_btc_address: string;
            borrower_derivation_path: string;
            /** @description This is optional because certain integrations (such as Pay with Moon) define their own loan
             *     address. */
            borrower_loan_address?: string | null;
            borrower_npub?: null | components["schemas"]["Npub"];
            borrower_pk: string;
            /** Format: uuid */
            client_contract_id?: string | null;
            /**
             * Format: int32
             * @description Maximum duration for range
             */
            duration_days_max: number;
            /**
             * Format: int32
             * @description Minimum duration for range
             */
            duration_days_min: number;
            /**
             * Format: double
             * @description Yearly interest rate.
             */
            interest_rate: number;
            /**
             * Format: double
             * @description Maximum loan amount for range
             */
            loan_amount_max: number;
            /**
             * Format: double
             * @description Minimum loan amount for range
             */
            loan_amount_min: number;
            loan_asset: components["schemas"]["LoanAsset"];
            loan_type: components["schemas"]["LoanType"];
            /** Format: double */
            ltv: number;
            repayment_plan: components["schemas"]["RepaymentPlan"];
        };
        /** @enum {string} */
        Currency: "UsdcPolygon" | "BtcBitcoin" | "UsdtTron";
        DeclineData: {
            /** Format: double */
            amount: number;
            card: components["schemas"]["TransactionCard"];
            customer_friendly_description: string;
            /** @description The date we receive has the following format: 2024-11-14 10:26:24 */
            datetime: string;
            merchant: string;
        };
        /** @enum {string} */
        DisputeInitiatorType: "Borrower" | "Lender";
        DisputeMessage: {
            message: string;
        };
        DisputeRequestBodySchema: {
            comment: string;
            contract_id: string;
            reason: string;
        };
        /** @enum {string} */
        DisputeStatus: "DisputeStartedBorrower" | "DisputeStartedLender" | "InProgress" | "Closed" | "Cancelled";
        DisputeWithMessages: components["schemas"]["ContractDispute"] & {
            messages: components["schemas"]["ContractDisputeMessage"][];
        };
        EditLoanApplicationRequest: {
            /**
             * Format: int32
             * @description Maximum duration for range
             */
            duration_days_max: number;
            /**
             * Format: int32
             * @description Minimum duration for range
             */
            duration_days_min: number;
            /** Format: double */
            interest_rate: number;
            /**
             * Format: double
             * @description Maximum loan amount for range
             */
            loan_amount_max: number;
            /**
             * Format: double
             * @description Minimum loan amount for range
             */
            loan_amount_min: number;
            /** Format: double */
            ltv: number;
        };
        ExtendContractRequestSchema: {
            /**
             * Format: int32
             * @description The number of days to be added on top of the current duration.
             */
            new_duration: number;
        };
        Fee: {
            /** Format: double */
            amount: number;
            fee_description: string;
            type: string;
        };
        /** @description Details needed for the lender to send fiat to the borrower.
         *
         *     All fields are _encrypted_ so that the hub can't learn anything. */
        FiatLoanDetails: {
            address: string;
            bank_address: string;
            bank_country: string;
            bank_name: string;
            city: string;
            /** @description Extra information the borrower may want to provide to the lender. */
            comments?: string | null;
            country: string;
            full_name: string;
            iban_transfer_details?: null | components["schemas"]["IbanTransferDetails"];
            post_code: string;
            purpose_of_remittance: string;
            swift_transfer_details?: null | components["schemas"]["SwiftTransferDetails"];
        };
        FiatLoanDetailsWrapper: {
            details: components["schemas"]["FiatLoanDetails"];
            /** @description The ciphertext which the borrower can decrypt to get the decryption key which can be used
             *     to decrypt the `details`. */
            encrypted_encryption_key_borrower: string;
            /** @description The ciphertext which the lender can decrypt to get the decryption key which can be used to
             *     decrypt the `details`. */
            encrypted_encryption_key_lender: string;
        };
        FiatLoanDetailsWrapperResponse: {
            details: components["schemas"]["FiatLoanDetails"];
            /** @description The borrower's encrypted encryption key. */
            encrypted_encryption_key: string;
        };
        FilteredUser: {
            /** Format: date-time */
            created_at: string;
            email?: string | null;
            /** Format: double */
            first_time_discount_rate: number;
            id: string;
            locale?: string | null;
            name: string;
            personal_referral_codes: components["schemas"]["PersonalReferralCodeResponse"][];
            personal_telegram_token: string;
            timezone?: string | null;
            totp_enabled: boolean;
            /** Format: date-time */
            updated_at: string;
            used_referral_code?: string | null;
            verified: boolean;
        };
        ForgotPasswordSchema: {
            email: components["schemas"]["String"];
        };
        /** @description Response containing the generated Bitcoin invoice and corresponding installment. */
        GenerateBitcoinInvoiceResponse: {
            /** @description The installment being paid. */
            installment: components["schemas"]["Installment"];
            /** @description The generated Bitcoin invoice. */
            invoice: components["schemas"]["BitcoinRepaymentInvoiceResponse"];
        };
        Health: {
            message: string;
        };
        /** @description Details needed for the lender to send fiat via an IBAN transfer to the borrower.
         *
         *     All fields are _encrypted_ so that the hub can't learn anything. */
        IbanTransferDetails: {
            bic?: string | null;
            iban: string;
        };
        Installment: {
            /** Format: date-time */
            due_date: string;
            /** Format: uuid */
            id: string;
            /** Format: double */
            interest: number;
            /** Format: date-time */
            paid_date?: string | null;
            payment_id?: string | null;
            /** Format: double */
            principal: number;
            status: components["schemas"]["InstallmentStatus"];
        };
        InstallmentPaidRequest: {
            /** Format: uuid */
            installment_id: string;
            /** @description For stablecoin loans, this should be a TXID. For fiat loans, there is no predefined format
             *     so this may be left empty. */
            payment_id: string;
        };
        /** @enum {string} */
        InstallmentStatus: "pending" | "paid" | "confirmed" | "late" | "cancelled";
        IsRegisteredResponse: {
            is_registered: boolean;
            is_verified: boolean;
        };
        /** @enum {string} */
        KycFilter: "no_kyc" | "with_kyc" | "all";
        KycInfo: {
            is_kyc_done: boolean;
            /** Format: uri */
            kyc_link: string;
        };
        LenderStats: {
            id: string;
            /** Format: date-time */
            joined_at: string;
            name: string;
            /**
             * Format: int64
             * @description Number of total closed or currently open contracts
             */
            successful_contracts: number;
            timezone?: string | null;
            /** @description Indicates if the lender has been vetted by the platform */
            vetted: boolean;
        };
        /** @enum {string} */
        LiquidationStatus: "Healthy" | "FirstMarginCall" | "SecondMarginCall" | "Liquidated";
        LoanApplication: {
            borrower_btc_address: string;
            borrower_derivation_path: string;
            borrower_id: string;
            /** @description This is optional because certain integrations (such as Pay with Moon) define their own loan
             *     address. */
            borrower_loan_address?: string | null;
            borrower_npub: components["schemas"]["Npub"];
            borrower_pk: string;
            /** Format: uuid */
            client_contract_id?: string | null;
            /** Format: date-time */
            created_at: string;
            /** Format: int32 */
            duration_days_max: number;
            /** Format: int32 */
            duration_days_min: number;
            /**
             * Format: double
             * @description Yearly interest rate.
             */
            interest_rate: number;
            /** Format: double */
            loan_amount_max: number;
            /** Format: double */
            loan_amount_min: number;
            loan_asset: components["schemas"]["LoanAsset"];
            loan_deal_id: string;
            loan_type: components["schemas"]["LoanType"];
            /** Format: double */
            ltv: number;
            repayment_plan: components["schemas"]["RepaymentPlan"];
            status: components["schemas"]["LoanApplicationStatus"];
            /** Format: date-time */
            updated_at: string;
        };
        LoanApplicationErrorResponse: {
            message: string;
        };
        /** @enum {string} */
        LoanApplicationStatus: "Available" | "Unavailable" | "Taken" | "Deleted" | "ApplicationExpired" | "Cancelled";
        /** @enum {string} */
        LoanAsset: "UsdcPol" | "UsdtPol" | "UsdcEth" | "UsdtEth" | "UsdcStrk" | "UsdtStrk" | "UsdcSol" | "UsdtSol" | "Usd" | "Eur" | "Chf" | "Mxn" | "UsdtLiquid";
        LoanOffer: {
            /** Format: int32 */
            duration_days_max: number;
            /** Format: int32 */
            duration_days_min: number;
            id: string;
            /** Format: double */
            interest_rate: number;
            /** Format: uri */
            kyc_link?: string | null;
            lender: components["schemas"]["LenderStats"];
            lender_pk: string;
            /** Format: double */
            loan_amount_max: number;
            /** Format: double */
            loan_amount_min: number;
            loan_asset: components["schemas"]["LoanAsset"];
            loan_payout: components["schemas"]["LoanPayout"];
            loan_repayment_address: string;
            /** Format: double */
            min_ltv: number;
            name: string;
            origination_fee: components["schemas"]["OriginationFee"][];
            repayment_plan: components["schemas"]["RepaymentPlan"];
            status: components["schemas"]["LoanOfferStatus"];
        };
        /** @enum {string} */
        LoanOfferStatus: "Available" | "Unavailable" | "Deleted";
        /** @enum {string} */
        LoanPayout: "Direct" | "Indirect" | "MoonCardInstant";
        LoanTransaction: {
            contract_id: string;
            /** Format: int64 */
            id: number;
            /** Format: date-time */
            timestamp: string;
            transaction_type: components["schemas"]["TransactionType"];
            txid: string;
        };
        /**
         * @description The type of loan primarily describes where to deliver the principal.
         * @enum {string}
         */
        LoanType: "PayWithMoon" | "MoonCardInstant" | "StableCoin" | "Fiat" | "Bringin";
        MeResponse: {
            enabled_features: components["schemas"]["BorrowerLoanFeatureResponse"][];
            user: components["schemas"]["FilteredUser"];
        };
        /** @description Request body for creating a new card. */
        NewCardRequest: {
            /**
             * Format: double
             * @description The amount in USD to add to the card
             */
            amount_usd: number;
            /** @description The currency to use for the new card */
            currency: components["schemas"]["Currency"];
        };
        /** @description Response from creating a new card containing the invoice details. */
        NewCardResponse: {
            /** @description The blockchain address to send payment to */
            address: string;
            /**
             * Format: double
             * @description The amount in cryptocurrency
             */
            crypto_amount: number;
            /** @description The currency to pay in */
            currency: components["schemas"]["Currency"];
            /**
             * Format: date-time
             * @description When the invoice expires
             */
            expires_at: string;
            /**
             * Format: uuid
             * @description The invoice ID
             */
            invoice_id: string;
            /**
             * Format: double
             * @description The amount in USD
             */
            usd_amount: number;
        };
        NotificationMessage: {
            data: {
                contract_id: string;
                /** Format: uuid */
                id: string;
                read: boolean;
                status: components["schemas"]["ContractStatus"];
                /** Format: date-time */
                timestamp: string;
            };
            /** @enum {string} */
            type: "ContractUpdate";
        } | {
            data: {
                contract_id: string;
                /** Format: uuid */
                id: string;
                /** Format: uuid */
                installment_id: string;
                read: boolean;
                status: components["schemas"]["InstallmentStatus"];
                /** Format: date-time */
                timestamp: string;
            };
            /** @enum {string} */
            type: "InstallmentUpdate";
        } | {
            data: {
                contract_id: string;
                counterparty_name: string;
                /** Format: uuid */
                id: string;
                read: boolean;
                /** Format: date-time */
                timestamp: string;
            };
            /** @enum {string} */
            type: "ChatMessage";
        };
        NotifyUser: {
            contract_id: string;
        };
        /**
         * @description A Nostr public key in bech32 format (npub...)
         * @example npub17mx98j4khcynw7cm6m0zfu5q2uv6dqs2lenaq8nfzn8paz5dt4hqs5utwq
         */
        Npub: string;
        /** @description Origination fee when establishing a new loan depends on the loan length. */
        OriginationFee: {
            /**
             * Format: double
             * @description Fee expressed as a number between 0 and 1, e.g. 0.01 = 1%
             */
            fee: number;
            /**
             * Format: int32
             * @description Loans starting from this are considered, i.e. `>=from_day`
             */
            from_day: number;
            /**
             * Format: int32
             * @description Loans smaller than this are considered, i.e. `<to_day`
             */
            to_day: number;
        };
        PaginatedContractsResponse: {
            data: components["schemas"]["Contract"][];
            /** Format: int32 */
            limit: number;
            /** Format: int32 */
            page: number;
            /** Format: int64 */
            total: number;
            /** Format: int32 */
            total_pages: number;
        };
        PaginatedResponse_NotificationMessage: {
            data: ({
                data: {
                    contract_id: string;
                    /** Format: uuid */
                    id: string;
                    read: boolean;
                    status: components["schemas"]["ContractStatus"];
                    /** Format: date-time */
                    timestamp: string;
                };
                /** @enum {string} */
                type: "ContractUpdate";
            } | {
                data: {
                    contract_id: string;
                    /** Format: uuid */
                    id: string;
                    /** Format: uuid */
                    installment_id: string;
                    read: boolean;
                    status: components["schemas"]["InstallmentStatus"];
                    /** Format: date-time */
                    timestamp: string;
                };
                /** @enum {string} */
                type: "InstallmentUpdate";
            } | {
                data: {
                    contract_id: string;
                    counterparty_name: string;
                    /** Format: uuid */
                    id: string;
                    read: boolean;
                    /** Format: date-time */
                    timestamp: string;
                };
                /** @enum {string} */
                type: "ChatMessage";
            })[];
            /** Format: int32 */
            limit: number;
            /** Format: int32 */
            page: number;
            /** Format: int64 */
            total: number;
            /** Format: int32 */
            total_pages: number;
        };
        PakeLoginRequest: {
            email: components["schemas"]["String"];
        };
        PakeLoginResponse: {
            b_pub: string;
            salt: string;
        };
        PakeVerifyRequest: {
            a_pub: string;
            client_proof: string;
            email: components["schemas"]["String"];
        };
        PakeVerifyResponse: {
            enabled_features: components["schemas"]["BorrowerLoanFeature"][];
            server_proof: string;
            token: string;
            user: components["schemas"]["FilteredUser"];
            wallet_backup_data: components["schemas"]["WalletBackupData"];
        };
        PakeVerifyResult: components["schemas"]["PakeVerifyTotpResponse"] | components["schemas"]["PakeVerifyWithCookie"];
        PakeVerifyTotpResponse: {
            server_proof: string;
            session_token?: string | null;
            totp_required: boolean;
        };
        PakeVerifyWithCookie: components["schemas"]["PakeVerifyResponse"];
        PersonalReferralCodeResponse: {
            active: boolean;
            code: string;
            /** Format: double */
            commission_rate_referrer: number;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            expires_at: string;
            /** Format: double */
            first_time_commission_rate_referrer: number;
            /** Format: double */
            first_time_discount_rate_referee: number;
        };
        PostConnectWithBringinRequest: {
            bringin_email: string;
        };
        PostConnectWithBringinResponse: {
            /** Format: uri */
            signup_url?: string | null;
        };
        PsbtQueryParams: {
            /** Format: int64 */
            fee_rate: number;
        };
        /** @description Request body for pubkey challenge generation. */
        PubkeyChallengeRequest: {
            pubkey: string;
        };
        /** @description Response containing a challenge for the client to sign. */
        PubkeyChallengeResponse: {
            challenge: string;
        };
        /** @description Request body for pubkey-based authentication. */
        PubkeyVerifyRequest: {
            challenge: string;
            pubkey: string;
            signature: string;
        };
        /** @description Response after successful pubkey authentication. */
        PubkeyVerifyResponse: {
            enabled_features: components["schemas"]["BorrowerLoanFeature"][];
            token: string;
            user: components["schemas"]["FilteredUser"];
        };
        /** @enum {string} */
        QueryParamLoanType: "Direct" | "Indirect" | "MoonCardInstant" | "All";
        RecoverTx: {
            tx: string;
        };
        /** @description Response after successful pubkey registration. */
        RegisterPubkeyResponse: {
            user_id: string;
        };
        /** @description Request body for pubkey-based registration. */
        RegisterPubkeyUserSchema: {
            email: string;
            invite_code?: string | null;
            name: string;
            pubkey: string;
        };
        RegisterUserSchema: {
            /** @description Used as the user's unique identifier. */
            email: components["schemas"]["String"];
            invite_code?: string | null;
            name: string;
            salt: string;
            verifier: string;
            wallet_backup_data: components["schemas"]["WalletBackupData"];
        };
        RegistrationResponse: {
            message: string;
        };
        /** @enum {string} */
        RepaymentPlan: "bullet" | "interest_only_weekly" | "interest_only_monthly";
        ReportBitcoinPaymentRequest: {
            invoice_id: string;
            /** @description Bitcoin transaction ID of the payment. */
            txid: string;
        };
        ResetLegacyPasswordSchema: {
            password: string;
        };
        ResetPasswordSchema: {
            new_wallet_backup_data: components["schemas"]["WalletBackupData"];
            salt: string;
            verifier: string;
        };
        /** @enum {string} */
        SenderType: "Borrower" | "Lender" | "PlatformAdmin";
        /** @enum {string} */
        SortField: "created_at" | "loan_amount" | "expiry_date" | "interest_rate" | "status" | "collateral_sats" | "updated_at";
        /** @enum {string} */
        SortOrder: "asc" | "desc";
        SpendCollateralPsbt: {
            borrower_pk: string;
            collateral_descriptor: string;
            psbt: string;
        };
        String: string;
        /** @description Details needed for the lender to send fiat via a SWIFT transfer to the borrower.
         *
         *     All fields are _encrypted_ so that the hub can't learn anything. */
        SwiftTransferDetails: {
            account_number: string;
            swift_or_bic: string;
        };
        TimelineEvent: {
            /** Format: date-time */
            date: string;
            event: components["schemas"]["TimelineEventKind"];
            /** @description Only provided if it was an event caused by a transaction. */
            txid?: string | null;
        };
        TimelineEventKind: {
            status: components["schemas"]["ContractStatus"];
            /** @enum {string} */
            type: "contract_status_change";
        } | {
            /** Format: uuid */
            installment_id: string;
            is_confirmed: boolean;
            /** @enum {string} */
            type: "installment_payment";
        };
        /** @description Request body for topping up a card. */
        TopupCardRequest: {
            /**
             * Format: double
             * @description The amount in USD to add to the card
             */
            amount_usd: number;
            /**
             * Format: uuid
             * @description The ID of the card to topup
             */
            card_id: string;
            /** @description The currency to use for the topup */
            currency: components["schemas"]["Currency"];
        };
        /** @description Response from topping up a card containing the invoice details. */
        TopupCardResponse: {
            /** @description The blockchain address to send payment to */
            address: string;
            /**
             * Format: double
             * @description The amount in cryptocurrency
             */
            crypto_amount: number;
            /** @description The currency to pay in */
            currency: components["schemas"]["Currency"];
            /**
             * Format: date-time
             * @description When the invoice expires
             */
            expires_at: string;
            /**
             * Format: uuid
             * @description The invoice ID
             */
            invoice_id: string;
            /**
             * Format: double
             * @description The amount in USD
             */
            usd_amount: number;
        };
        TotpLoginVerifyRequest: {
            session_token: string;
            totp_code: string;
        };
        TotpSetupResponse: {
            qr_code_uri: string;
            secret: string;
        };
        TransactionCard: {
            name: string;
            /** Format: uuid */
            public_id: string;
            type: string;
        };
        TransactionData: {
            /** Format: double */
            amount: number;
            /** Format: double */
            amount_fees_in_ledger_currency: number;
            /** Format: double */
            amount_fees_in_transaction_currency: number;
            /** Format: double */
            amount_in_transaction_currency: number;
            card: components["schemas"]["TransactionCard"];
            /** @description Date when the transaction happened
             *     The date we receive has the following format: 2024-11-14 10:26:24 */
            datetime: string;
            fees: components["schemas"]["Fee"][];
            ledger_currency: string;
            merchant: string;
            transaction_currency: string;
            /** Format: uuid */
            transaction_id: string;
            transaction_status: components["schemas"]["TransactionStatus"];
        };
        TransactionStatus: "Authorization" | "Reversal" | "Clearing" | "Refund" | "Pending" | "Settled" | {
            Unknown: string;
        };
        /** @enum {string} */
        TransactionType: "Funding" | "Dispute" | "PrincipalGiven" | "InstallmentPaid" | "Liquidation" | "Defaulted" | "ClaimCollateral";
        UpdateBorrowerBtcAddress: {
            address: string;
            /** @description A recoverable signature of the address using "bitcoin's" signing protocol, i.e. the message
             *     (`address`) is prepended with b"\x18Bitcoin Signed Message:\n".
             *
             *     The message needs to be signed using the sk behind the pk in the corresponding contract.
             *     See https://docs.rs/satsnet/latest/src/satsnet/sign_message.rs.html#201-208 */
            recoverable_signature_hex: string;
            /** Format: int32 */
            recoverable_signature_id: number;
        };
        UpdateLocale: {
            locale?: string | null;
        };
        UpdateProfile: {
            timezone: string;
        };
        VerifyTotpRequest: {
            totp_code: string;
        };
        Version: {
            commit_hash: string;
            tag: string;
        };
        WaitlistBody: {
            email: string;
        };
        WalletBackupData: {
            mnemonic_ciphertext: string;
            network: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    check_auth_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User is authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description User is not authenticated */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    forgot_password_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ForgotPasswordSchema"];
            };
        };
        responses: {
            /** @description Password reset email sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid email, user not found, or account not verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_is_registered: {
        parameters: {
            query: {
                /** @description Email address to check */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Registration and verification status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IsRegisteredResponse"];
                };
            };
            /** @description Invalid email address */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    logout_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successfully logged out */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pake_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PakeLoginRequest"];
            };
        };
        responses: {
            /** @description PAKE login challenge response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PakeLoginResponse"];
                };
            };
            /** @description Invalid email, email not verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pake_verify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PakeVerifyResult"];
            };
        };
        responses: {
            /** @description PAKE verification successful, may require TOTP */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PakeVerifyTotpResponse"];
                };
            };
            /** @description Invalid credentials or authentication failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pake_verify_mobile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PakeVerifyRequest"];
            };
        };
        responses: {
            /** @description PAKE verification successful, user authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PakeVerifyResult"];
                };
            };
            /** @description Invalid credentials or authentication failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pubkey_challenge: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PubkeyChallengeRequest"];
            };
        };
        responses: {
            /** @description Challenge generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PubkeyChallengeResponse"];
                };
            };
            /** @description Invalid public key format */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pubkey_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterPubkeyUserSchema"];
            };
        };
        responses: {
            /** @description User registered successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegisterPubkeyResponse"];
                };
            };
            /** @description Invalid email or pubkey */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email or pubkey already registered */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_pubkey_verify: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PubkeyVerifyRequest"];
            };
        };
        responses: {
            /** @description Authentication successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PubkeyVerifyResponse"];
                };
            };
            /** @description Invalid signature or challenge */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_token_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    refresh_token_handler_mobile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token refreshed successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid or expired token */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterUserSchema"];
            };
        };
        responses: {
            /** @description Message if the registration was successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RegistrationResponse"];
                };
            };
            /** @description Invalid email, invite code required, or invalid referral code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal server error during registration process */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_legacy_password_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Password reset token */
                password_reset_token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetLegacyPasswordSchema"];
            };
        };
        responses: {
            /** @description Legacy password reset successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid reset token or no legacy password to reset */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    reset_password_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Password reset token */
                password_reset_token: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ResetPasswordSchema"];
            };
        };
        responses: {
            /** @description Password reset successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid reset token or token expired */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_totp_verify_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpLoginVerifyRequest"];
            };
        };
        responses: {
            /** @description TOTP verification successful, user authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PakeVerifyResponse"];
                };
            };
            /** @description Invalid TOTP code or session token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_totp_verify_mobile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TotpLoginVerifyRequest"];
            };
        };
        responses: {
            /** @description PAKE verification successful, user authenticated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PakeVerifyResponse"];
                };
            };
            /** @description Invalid credentials or authentication failed */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verify_email_handler: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Email verification code */
                verification_code: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Email verified successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid verification code or user already verified */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_add_to_waitlist: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["WaitlistBody"];
            };
        };
        responses: {
            /** @description Successfully added to waitlist */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Email already in waitlist */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    has_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description API key status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKey"];
                };
            };
        };
    };
    post_connect_with_bringin: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PostConnectWithBringinRequest"];
            };
        };
        responses: {
            /** @description Bringin connection initiated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PostConnectWithBringinResponse"];
                };
            };
            /** @description Invalid email address */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    new_chat_notification: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NotifyUser"];
            };
        };
        responses: {
            /** @description Chat notification sent successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Contract not found or lender not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_contracts: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                /** @description Filter contracts by status. Can be provided multiple times to filter by multiple statuses.
                 *     Example: ?status=Requested,Approved */
                status?: components["schemas"]["ContractStatus"][];
                /** @description Sort field for ordering results. Default is 'created_at'. */
                sort_by?: components["schemas"]["SortField"];
                /** @description Sort order. Default is 'desc' (newest first). */
                sort_order?: components["schemas"]["SortOrder"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of contracts, optionally filtered by status and sorted by specified field */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedContractsResponse"];
                };
            };
            /** @description Bad request (invalid pagination parameters) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_contract_request: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ContractRequestSchema"];
            };
        };
        responses: {
            /** @description The successfully requested contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    get_contract: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description If present, the contract details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    cancel_contract_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description If OK HTTP 200 is returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_borrower_btc_address: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract id */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBorrowerBtcAddress"];
            };
        };
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_claim_tx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ClaimTx"];
            };
        };
        responses: {
            /** @description Successfully broadcast claim transaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastClaimTxResponse"];
                };
            };
        };
    };
    post_recover_tx: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RecoverTx"];
            };
        };
        responses: {
            /** @description Transaction ID of successfully posted recovery transaction */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BroadcastRecoverTxResponse"];
                };
            };
        };
    };
    put_report_btc_payment: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Bitcoin invoice ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReportBitcoinPaymentRequest"];
            };
        };
        responses: {
            /** @description Bitcoin payment reported successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad request - invoice expired, invalid state, etc. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invoice not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_claim_collateral_psbt: {
        parameters: {
            query: {
                fee_rate: number;
            };
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpendCollateralPsbt"];
                };
            };
        };
    };
    post_extend_contract_request: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ExtendContractRequestSchema"];
            };
        };
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Contract"];
                };
            };
        };
    };
    put_provide_fiat_loan_details: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FiatLoanDetailsWrapper"];
            };
        };
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    post_generate_btc_invoice: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Bitcoin invoice generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenerateBitcoinInvoiceResponse"];
                };
            };
            /** @description Bad request - currency not supported, no BTC address, existing invoice, etc. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Contract not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_installment_paid: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["InstallmentPaidRequest"];
            };
        };
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_recover_collateral_psbt: {
        parameters: {
            query: {
                fee_rate: number;
            };
            header?: never;
            path: {
                /** @description Contract ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ok if successful */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SpendCollateralPsbt"];
                };
            };
        };
    };
    post_create_api_account: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiAccountRequest"];
            };
        };
        responses: {
            /** @description If successful, return new user object which holds the new API key. Note: the API key is only returned once! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateApiAccountResponse"];
                };
            };
        };
    };
    post_create_api_account_byok: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiAccountByokRequest"];
            };
        };
        responses: {
            /** @description If successful, return new user object with the provided API key. Note: the API key is returned as provided! */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CreateApiAccountResponse"];
                };
            };
        };
    };
    get_all_disputes_for_contract: {
        parameters: {
            query: {
                contract_id: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of disputes with messages for the contract */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DisputeWithMessages"][];
                };
            };
        };
    };
    create_dispute: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisputeRequestBodySchema"];
            };
        };
        responses: {
            /** @description Dispute created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ContractDispute"];
                };
            };
            /** @description Dispute already in progress for this contract */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    add_message_to_dispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                dispute_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DisputeMessage"];
            };
        };
        responses: {
            /** @description Message added to dispute successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_resolve_dispute: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Dispute ID */
                dispute_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Dispute resolved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Dispute was not started by borrower */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    health_checker_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shows if server is up and running */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Health"][];
                };
            };
        };
    };
    get_api_keys: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list API Keys */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyInfo"][];
                };
            };
        };
    };
    post_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApiKey"];
            };
        };
        responses: {
            /** @description Returns the newly created API key */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApiKeyResponse"];
                };
            };
        };
    };
    delete_api_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description API key ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description If OK HTTP 200 is returned */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_loan_applications_by_borrower: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of loan applications for this borrower */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplication"][];
                };
            };
        };
    };
    create_loan_application: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateLoanApplicationSchema"];
            };
        };
        responses: {
            /** @description Loan application created successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplication"];
                };
            };
            /** @description Invalid loan application parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplicationErrorResponse"];
                };
            };
        };
    };
    put_mark_loan_application_as_deleted: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Loan application ID to delete */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Loan application marked as deleted successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Loan application not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplicationErrorResponse"];
                };
            };
        };
    };
    put_edit_loan_application: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Loan application ID to edit */
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EditLoanApplicationRequest"];
            };
        };
        responses: {
            /** @description Loan application edited successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplication"];
                };
            };
            /** @description Invalid loan application parameters */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplicationErrorResponse"];
                };
            };
            /** @description Loan application not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplicationErrorResponse"];
                };
            };
        };
    };
    get_loan_application_by_application_and_application_id: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Loan application ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Loan application details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplication"];
                };
            };
            /** @description Loan application not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanApplicationErrorResponse"];
                };
            };
        };
    };
    get_cards: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of borrower's cards with current details */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Card"][];
                };
            };
        };
    };
    new_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["NewCardRequest"];
            };
        };
        responses: {
            /** @description Invoice generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NewCardResponse"];
                };
            };
            /** @description Invalid request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to generate invoice */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    topup_card: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TopupCardRequest"];
            };
        };
        responses: {
            /** @description Invoice generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TopupCardResponse"];
                };
            };
            /** @description Invalid request or card not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to generate invoice */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_card_transactions: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Card ID */
                card_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of transactions for the specified card */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardTransaction"][];
                };
            };
            /** @description Invalid card ID or card not found */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_notification_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Borrower notification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BorrowerNotificationSettingsResponse"];
                };
            };
        };
    };
    put_notification_settings: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BorrowerNotificationSettingsResponse"];
            };
        };
        responses: {
            /** @description Updated borrower notification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BorrowerNotificationSettingsResponse"];
                };
            };
        };
    };
    get_all_notifications: {
        parameters: {
            query?: {
                page?: number;
                limit?: number;
                unread_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Paginated list of notifications */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedResponse_NotificationMessage"];
                };
            };
            /** @description Bad request (invalid pagination parameters) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_mark_all_as_read: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All notifications marked as read successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    put_mark_as_read: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Notification ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Notification marked as read successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_all_available_loan_offers: {
        parameters: {
            query?: {
                /** @description Filter by loan type: Direct, Indirect, or All. Defaults to Direct if not provided. */
                loan_type?: components["schemas"]["QueryParamLoanType"];
                /** @description Filter by asset type: fiat, stable_coins, or all */
                asset_type?: components["schemas"]["AssetTypeFilter"];
                /** @description Filter by specific loan assets (comma-separated list, e.g., 'UsdcPol,UsdtPol') */
                loan_assets?: string;
                /** @description Filter by KYC requirement: no_kyc, with_kyc, or all */
                kyc?: components["schemas"]["KycFilter"];
                /** @description Minimum loan amount */
                min_loan_amount?: number;
                /** @description Maximum loan amount */
                max_loan_amount?: number;
                /** @description Maximum yearly interest rate (e.g., 0.12 for 12%) */
                max_interest_rate?: number;
                /** @description Minimum duration in days */
                duration_min?: number;
                /** @description Maximum duration in days */
                duration_max?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of available offers */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanOffer"][];
                };
            };
        };
    };
    get_available_loan_offers_by_lender: {
        parameters: {
            query?: {
                /** @description Filter by loan type: Direct, Indirect, or All. Defaults to Direct if not provided. */
                loan_type?: components["schemas"]["QueryParamLoanType"];
                /** @description Filter by asset type: fiat, stable_coins, or all */
                asset_type?: components["schemas"]["AssetTypeFilter"];
                /** @description Filter by specific loan assets (comma-separated list, e.g., 'UsdcPol,UsdtPol') */
                loan_assets?: string;
                /** @description Filter by KYC requirement: no_kyc, with_kyc, or all */
                kyc?: components["schemas"]["KycFilter"];
                /** @description Minimum loan amount */
                min_loan_amount?: number;
                /** @description Maximum loan amount */
                max_loan_amount?: number;
                /** @description Maximum yearly interest rate (e.g., 0.12 for 12%) */
                max_interest_rate?: number;
                /** @description Minimum duration in days */
                duration_min?: number;
                /** @description Maximum duration in days */
                duration_max?: number;
            };
            header?: never;
            path: {
                /** @description Lender ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A list of loan offers created by the given lender */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanOffer"][];
                };
            };
        };
    };
    get_loan_offer: {
        parameters: {
            query?: {
                /** @description Filter by loan type: Direct, Indirect, or All */
                loan_type?: components["schemas"]["QueryParamLoanType"];
                /** @description Filter by asset type: fiat, stable_coins, or all */
                asset_type?: components["schemas"]["AssetTypeFilter"];
                /** @description Filter by specific loan assets (comma-separated list, e.g., 'UsdcPol,UsdtPol') */
                loan_assets?: string;
                /** @description Filter by KYC requirement: no_kyc, with_kyc, or all */
                kyc?: components["schemas"]["KycFilter"];
                /** @description Minimum loan amount */
                min_loan_amount?: number;
                /** @description Maximum loan amount */
                max_loan_amount?: number;
                /** @description Maximum yearly interest rate (e.g., 0.12 for 12%) */
                max_interest_rate?: number;
                /** @description Minimum duration in days */
                duration_min?: number;
                /** @description Maximum duration in days */
                duration_max?: number;
            };
            header?: never;
            path: {
                /** @description Loan offer ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A loan offer */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoanOffer"];
                };
            };
        };
    };
    price_feed_websocket_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description WebSocket connection established successfully */
            101: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_borrower_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Borrower ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Borrower statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BorrowerStats"];
                };
            };
        };
    };
    get_lender_stats: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Lender ID */
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Lender statistics */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LenderStats"];
                };
            };
        };
    };
    update_profile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfile"];
            };
        };
        responses: {
            /** @description Profile updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid timezone provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    update_locale: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateLocale"];
            };
        };
        responses: {
            /** @description Locale updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_me_handler: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Current user information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MeResponse"];
                };
            };
        };
    };
    disable_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyTotpRequest"];
            };
        };
        responses: {
            /** @description TOTP disabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description TOTP is not enabled or invalid code */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    setup_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description TOTP setup information generated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TotpSetupResponse"];
                };
            };
            /** @description Failed to generate TOTP secret */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    verify_totp: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VerifyTotpRequest"];
            };
        };
        responses: {
            /** @description TOTP verified and enabled successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Invalid TOTP code provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    version: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Return the deployed version and commit hash */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Version"];
                };
            };
        };
    };
}
