use crate::db;
use crate::model::ApiKeyInfo;
use crate::model::Borrower;
use crate::routes::borrower::auth::jwt_auth;
use crate::routes::AppState;
use axum::extract::rejection::JsonRejection;
use axum::extract::FromRequest;
use axum::extract::Path;
use axum::extract::State;
use axum::middleware;
use axum::response::IntoResponse;
use axum::response::Response;
use axum::routing::delete;
use axum::routing::get;
use axum::routing::post;
use axum::Extension;
use axum::Json;
use axum::Router;
use reqwest::StatusCode;
use serde::Deserialize;
use serde::Serialize;
use std::sync::Arc;
use tracing::instrument;

pub(crate) fn router(app_state: Arc<AppState>) -> Router {
    Router::new()
        .route(
            "/api/keys",
            get(get_api_keys).route_layer(middleware::from_fn_with_state(
                app_state.clone(),
                jwt_auth::auth,
            )),
        )
        .route(
            "/api/keys",
            post(post_api_key).route_layer(middleware::from_fn_with_state(
                app_state.clone(),
                jwt_auth::auth,
            )),
        )
        .route(
            "/api/keys/:id",
            delete(delete_api_key).route_layer(middleware::from_fn_with_state(
                app_state.clone(),
                jwt_auth::auth,
            )),
        )
        .with_state(app_state)
}

#[instrument(skip_all, err(Debug))]
async fn get_api_keys(
    State(data): State<Arc<AppState>>,
    Extension(user): Extension<Borrower>,
) -> Result<AppJson<Vec<ApiKeyInfo>>, Error> {
    let api_keys = db::api_keys::get_api_keys_borrower(&data.db, &user.id)
        .await
        .map_err(Error::Database)?;

    Ok(AppJson(api_keys))
}

#[derive(Debug, Deserialize)]
struct NewApiKey {
    /// ShA256 of the api key secret, generated by the client.
    api_key_hash: String,
    /// Purpose of the API key.
    description: String,
}

#[instrument(skip_all, err(Debug))]
async fn post_api_key(
    State(data): State<Arc<AppState>>,
    Extension(user): Extension<Borrower>,
    AppJson(body): AppJson<NewApiKey>,
) -> Result<(), Error> {
    db::api_keys::insert_borrower(&data.db, &body.api_key_hash, &user.id, &body.description)
        .await
        .map_err(Error::Database)?;

    Ok(())
}

#[instrument(skip_all, err(Debug))]
async fn delete_api_key(
    State(data): State<Arc<AppState>>,
    Extension(user): Extension<Borrower>,
    Path(id): Path<i32>,
) -> Result<(), Error> {
    db::api_keys::delete_borrower(&data.db, &user.id, id)
        .await
        .map_err(Error::Database)?;

    Ok(())
}

/// All the errors related to the `keys` REST API.
#[derive(Debug)]
enum Error {
    /// The request body contained invalid JSON.
    JsonRejection(JsonRejection),
    /// Failed to interact with the database.
    Database(anyhow::Error),
}

impl From<JsonRejection> for Error {
    fn from(rejection: JsonRejection) -> Self {
        Self::JsonRejection(rejection)
    }
}

// Create our own JSON extractor by wrapping `axum::Json`. This makes it easy to override the
// rejection and provide our own which formats errors to match our application.
//
// `axum::Json` responds with plain text if the input is invalid.
#[derive(Debug, FromRequest)]
#[from_request(via(Json), rejection(Error))]
struct AppJson<T>(T);

impl<T> IntoResponse for AppJson<T>
where
    Json<T>: IntoResponse,
{
    fn into_response(self) -> Response {
        Json(self.0).into_response()
    }
}

/// Tell `axum` how [`Error`] should be converted into a response.
///
/// This is also a convenient place to log errors.
impl IntoResponse for Error {
    fn into_response(self) -> Response {
        /// How we want error responses to be serialized.
        #[derive(Serialize)]
        struct ErrorResponse {
            message: String,
        }

        let (status, message) = match self {
            Error::JsonRejection(rejection) => {
                // This error is caused by bad user input so don't log it
                (rejection.status(), rejection.body_text())
            }
            Error::Database(e) => {
                // If we configure `tracing` properly, we don't need to add extra context here!
                tracing::error!("Database error: {e:#}");

                // Don't expose any details about the error to the client.
                (
                    StatusCode::INTERNAL_SERVER_ERROR,
                    "Something went wrong".to_owned(),
                )
            }
        };

        (status, AppJson(ErrorResponse { message })).into_response()
    }
}
