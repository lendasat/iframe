import React, { useEffect, useState } from "react";
import { Col, Container, Row } from "react-bootstrap";
import { useNavigate } from "react-router-dom";
import { v4 as uuidv4 } from "uuid";
import { LoanOffer } from "./loan-offer";
import LoanOffersComponent from "./loan-offers";
import LoanOffersFilter, { LoanFilter, LoanFilterType } from "./loan-offers-filter";
import { StableCoin } from "./stable-coin";

function RequestLoan() {
  const [loanOffers, setLoanOffers] = useState(getMockData());
  const [loanFilters, setLoanFilters] = useState<LoanFilter[]>([]);

  useEffect(() => {
    setLoanOffers(
      getMockData().filter(offer => {
        for (const filter of loanFilters) {
          switch (filter.type) {
            case LoanFilterType.AMOUNT: {
              if (filter.value === undefined || filter.value === "") {
                continue;
              }
              if (offer.amount.min > filter.value || offer.amount.max < filter.value) {
                return false;
              }
              break;
            }
            case LoanFilterType.STABLECOIN:
              if (filter.value === undefined || filter.value === "") {
                continue;
              }
              if (!(offer.coins.find((c) => c === filter.value))) {
                return false;
              }
              break;
            case LoanFilterType.LTV:
              if (offer.ltv > filter.value) {
                return false;
              }
              break;
            case LoanFilterType.INTEREST:
              if (offer.interest > filter.value) {
                return false;
              }
              break;
            case LoanFilterType.PERIOD:
              if (offer.duration.min > filter.value) {
                return false;
              }
              break;
          }
        }

        return true;
      }),
    );
  }, [loanFilters]);

  const navigate = useNavigate();
  return (
    <Container className="vh-100" fluid>
      <Row className="vh-100">
        <Col md={"2"} className="border-end d-flex align-items-stretch">
          <LoanOffersFilter
            onChange={(loanFilter: LoanFilter) => {
              // Remove any existing filter of that type.
              const filters = loanFilters.filter(
                (filter) => filter.type !== loanFilter.type,
              );
              filters.push(loanFilter);
              setLoanFilters(filters);
            }}
          />
        </Col>
        <Col md={"10"} className="p-4">
          <LoanOffersComponent
            loanOffers={loanOffers}
            onRequest={(loanOffer) => {
              // TODO: we might want this id to be generated by the backend.
              const id = uuidv4();
              navigate(`/request-loan/${id}`, { state: { loanOffer: loanOffer, loanFilters: loanFilters } });
            }}
          />
        </Col>
      </Row>
    </Container>
  );
}

// TODO: fetch from backend
function getMockData(): LoanOffer[] {
  const loanOffer1: LoanOffer = {
    lender: {
      name: "Lord Lendalot 1",
      rate: 100,
      loans: 240,
    },
    amount: {
      min: 10000,
      max: 100000,
    },
    duration: {
      min: 3,
      max: 6,
    },
    ltv: 66,
    interest: 12,
    coins: [StableCoin.USDT_SN, StableCoin.USDC_SN],
  };

  const loanOffer2: LoanOffer = {
    lender: {
      name: "Lord Lendalot 2",
      rate: 100,
      loans: 240,
    },
    amount: {
      min: 5000,
      max: 50000,
    },
    duration: {
      min: 6,
      max: 12,
    },
    ltv: 50,
    interest: 8,
    coins: [StableCoin.USDT_ETH],
  };

  const loanOffer3: LoanOffer = {
    lender: {
      name: "Lord Lendalot 3",
      rate: 100,
      loans: 240,
    },
    amount: {
      min: 5000,
      max: 50000,
    },
    duration: {
      min: 3,
      max: 6,
    },
    ltv: 40,
    interest: 8,
    coins: [StableCoin.USDT_ETH],
  };

  return [loanOffer1, loanOffer2, loanOffer3];
}

export default RequestLoan;
